USE springboardopt;

-- -------------------------------------
SET @v1 = 1612521;
SET @v2 = 1145072;
SET @v3 = 1828467;
SET @v4 = 'MGT382';
SET @v5 = 'Amber Hill';
SET @v6 = 'MGT';
SET @v7 = 'EE';			  
SET @v8 = 'MAT';

-- 5. List the names of students who have taken a course from department v6 (deptId), but not v7.
--  SELECT * FROM Student, 
--	(SELECT studId FROM Transcript, Course WHERE deptId = @v6 AND Course.crsCode = Transcript.crsCode
--	AND studId NOT IN
--	(SELECT studId FROM Transcript, Course WHERE deptId = @v7 AND Course.crsCode = Transcript.crsCode)) as alias
-- WHERE Student.id = alias.studId;

-- initial results were
-- '-> Nested loop inner join  (cost=1811.33 rows=4000) (actual time=11.637..57.702 rows=30 loops=1)\n    -> Inner hash join (no condition)  (cost=411.33 rows=4000) (actual time=10.973..14.216 rows=10400 loops=1)\n        -> Filter: (student.id is not null)  (cost=4.11 rows=400) (actual time=0.077..1.047 rows=400 loops=1)\n            -> Table scan on Student  (cost=4.11 rows=400) (actual time=0.076..0.955 rows=400 loops=1)\n        -> Hash\n            -> Filter: ((course.deptId = <cache>((@v6))) and (course.crsCode is not null))  (cost=10.25 rows=10) (actual time=10.711..10.859 rows=26 loops=1)\n                -> Table scan on Course  (cost=10.25 rows=100) (actual time=10.696..10.805 rows=100 loops=1)\n    -> Filter: <in_optimizer>(student.id,<exists>(select #3) is false)  (cost=0.25 rows=1) (actual time=0.004..0.004 rows=0 loops=10400)\n        -> Covering index lookup on Transcript using my_idx (studId=student.id, crsCode=course.crsCode)  (cost=0.25 rows=1) (actual time=0.003..0.003 rows=0 loops=10400)\n        -> Select #3 (subquery in condition; dependent)\n            -> Limit: 1 row(s)  (cost=10.00 rows=0) (actual time=0.195..0.195 rows=0 loops=30)\n                -> Filter: <if>(outer_field_is_not_null, <is_not_null_test>(transcript.studId), true)  (cost=10.00 rows=0) (actual time=0.194..0.194 rows=0 loops=30)\n                    -> Filter: (course.crsCode = transcript.crsCode)  (cost=10.00 rows=0) (actual time=0.194..0.194 rows=0 loops=30)\n                        -> Inner hash join (<hash>(course.crsCode)=<hash>(transcript.crsCode))  (cost=10.00 rows=0) (actual time=0.194..0.194 rows=0 loops=30)\n                            -> Filter: (course.deptId = <cache>((@v7)))  (cost=4.71 rows=1) (actual time=0.015..0.156 rows=32 loops=30)\n                                -> Table scan on Course  (cost=4.71 rows=100) (actual time=0.007..0.125 rows=100 loops=30)\n                            -> Hash\n                                -> Filter: <if>(outer_field_is_not_null, ((<cache>(transcript.studId) = transcript.studId) or (transcript.studId is null)), true)  (cost=0.48 rows=2) (actual time=0.009..0.015 rows=1 loops=30)\n                                    -> Alternative plans for IN subquery: Index lookup unless studId IS NULL  (cost=0.48 rows=2) (actual time=0.008..0.013 rows=1 loops=30)\n                                        -> Covering index lookup on Transcript using my_idx (studId=<cache>(transcript.studId) or NULL)  (actual time=0.007..0.013 rows=1 loops=30)\n                                        -> Table scan on Transcript  (never executed)\n'

-- added indexes on Course.crsCode    Student.id and Transcript.crsCode
-- new results are
-- '-> Nested loop inner join  (cost=17.47 rows=10) (actual time=0.257..2.863 rows=30 loops=1)\n    -> Nested loop inner join  (cost=13.86 rows=10) (actual time=0.126..0.918 rows=30 loops=1)\n        -> Filter: ((course.deptId = <cache>((@v6))) and (course.crsCode is not null))  (cost=10.25 rows=10) (actual time=0.072..0.425 rows=26 loops=1)\n            -> Table scan on Course  (cost=10.25 rows=100) (actual time=0.063..0.330 rows=100 loops=1)\n        -> Filter: (transcript.studId is not null)  (cost=0.27 rows=1) (actual time=0.014..0.018 rows=1 loops=26)\n            -> Index lookup on Transcript using idx_transcript_crsCode (crsCode=course.crsCode)  (cost=0.27 rows=1) (actual time=0.014..0.017 rows=1 loops=26)\n    -> Filter: <in_optimizer>(transcript.studId,<exists>(select #3) is false)  (cost=0.26 rows=1) (actual time=0.061..0.064 rows=1 loops=30)\n        -> Index lookup on Student using idx_student_id (id=transcript.studId)  (cost=0.26 rows=1) (actual time=0.013..0.016 rows=1 loops=30)\n        -> Select #3 (subquery in condition; dependent)\n            -> Limit: 1 row(s)  (cost=1.20 rows=0) (actual time=0.043..0.043 rows=0 loops=30)\n                -> Filter: <if>(outer_field_is_not_null, <is_not_null_test>(transcript.studId), true)  (cost=1.20 rows=0) (actual time=0.042..0.042 rows=0 loops=30)\n                    -> Nested loop inner join  (cost=1.20 rows=0) (actual time=0.042..0.042 rows=0 loops=30)\n                        -> Filter: (<if>(outer_field_is_not_null, ((<cache>(transcript.studId) = transcript.studId) or (transcript.studId is null)), true) and (transcript.crsCode is not null))  (cost=0.48 rows=2) (actual time=0.012..0.018 rows=1 loops=30)\n                            -> Alternative plans for IN subquery: Index lookup unless studId IS NULL  (cost=0.48 rows=2) (actual time=0.011..0.017 rows=1 loops=30)\n                                -> Covering index lookup on Transcript using my_idx (studId=<cache>(transcript.studId) or NULL)  (actual time=0.010..0.016 rows=1 loops=30)\n                                -> Table scan on Transcript  (never executed)\n                        -> Filter: (course.deptId = <cache>((@v7)))  (cost=0.26 rows=0) (actual time=0.022..0.022 rows=0 loops=30)\n                            -> Index lookup on Course using idx_course_crsCode (crsCode=transcript.crsCode)  (cost=0.26 rows=1) (actual time=0.015..0.020 rows=1 loops=30)\n'

-- since it only said to list the names i changed the wildcard to name
-- new results
-- '-> Nested loop inner join  (cost=17.47 rows=10) (actual time=0.160..2.240 rows=30 loops=1)\n    -> Nested loop inner join  (cost=13.86 rows=10) (actual time=0.079..0.796 rows=30 loops=1)\n        -> Filter: ((course.deptId = <cache>((@v6))) and (course.crsCode is not null))  (cost=10.25 rows=10) (actual time=0.042..0.343 rows=26 loops=1)\n            -> Table scan on Course  (cost=10.25 rows=100) (actual time=0.033..0.265 rows=100 loops=1)\n        -> Filter: (transcript.studId is not null)  (cost=0.27 rows=1) (actual time=0.013..0.017 rows=1 loops=26)\n            -> Index lookup on Transcript using idx_transcript_crsCode (crsCode=course.crsCode)  (cost=0.27 rows=1) (actual time=0.012..0.016 rows=1 loops=26)\n    -> Filter: <in_optimizer>(transcript.studId,<exists>(select #3) is false)  (cost=0.26 rows=1) (actual time=0.044..0.047 rows=1 loops=30)\n        -> Index lookup on Student using idx_student_id (id=transcript.studId)  (cost=0.26 rows=1) (actual time=0.007..0.010 rows=1 loops=30)\n        -> Select #3 (subquery in condition; dependent)\n            -> Limit: 1 row(s)  (cost=1.20 rows=0) (actual time=0.034..0.034 rows=0 loops=30)\n                -> Filter: <if>(outer_field_is_not_null, <is_not_null_test>(transcript.studId), true)  (cost=1.20 rows=0) (actual time=0.033..0.033 rows=0 loops=30)\n                    -> Nested loop inner join  (cost=1.20 rows=0) (actual time=0.033..0.033 rows=0 loops=30)\n                        -> Filter: (<if>(outer_field_is_not_null, ((<cache>(transcript.studId) = transcript.studId) or (transcript.studId is null)), true) and (transcript.crsCode is not null))  (cost=0.48 rows=2) (actual time=0.010..0.016 rows=1 loops=30)\n                            -> Alternative plans for IN subquery: Index lookup unless studId IS NULL  (cost=0.48 rows=2) (actual time=0.009..0.015 rows=1 loops=30)\n                                -> Covering index lookup on Transcript using my_idx (studId=<cache>(transcript.studId) or NULL)  (actual time=0.008..0.014 rows=1 loops=30)\n                                -> Table scan on Transcript  (never executed)\n                        -> Filter: (course.deptId = <cache>((@v7)))  (cost=0.26 rows=0) (actual time=0.016..0.016 rows=0 loops=30)\n                            -> Index lookup on Course using idx_course_crsCode (crsCode=transcript.crsCode)  (cost=0.26 rows=1) (actual time=0.010..0.014 rows=1 loops=30)\n'


EXPLAIN ANALYZE SELECT name FROM Student, 
	(SELECT studId FROM Transcript, Course WHERE deptId = @v6 AND Course.crsCode = Transcript.crsCode
	AND studId NOT IN
	(SELECT studId FROM Transcript, Course WHERE deptId = @v7 AND Course.crsCode = Transcript.crsCode)) as alias
WHERE Student.id = alias.studId;