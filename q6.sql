USE springboardopt;

-- -------------------------------------
SET @v1 = 1612521;
SET @v2 = 1145072;
SET @v3 = 1828467;
SET @v4 = 'MGT382';
SET @v5 = 'Amber Hill';
SET @v6 = 'MGT';
SET @v7 = 'EE';			  
SET @v8 = 'MAT';

-- 6. List the names of students who have taken all courses offered by department v8 (deptId).
 EXPLAIN ANALYZE SELECT name FROM Student,
	(SELECT studId
	FROM Transcript
		WHERE crsCode IN
		(SELECT crsCode FROM Course WHERE deptId = @v8 AND crsCode IN (SELECT crsCode FROM Teaching))
		GROUP BY studId
		HAVING COUNT(*) = 
			(SELECT COUNT(*) FROM Course WHERE deptId = @v8 AND crsCode IN (SELECT crsCode FROM Teaching))) as alias
 WHERE id = alias.studId;

-- initial results were
-- '-> Nested loop inner join  (cost=241.00 rows=0) (actual time=16.507..16.507 rows=0 loops=1)\n    -> Filter: (student.id is not null)  (cost=41.00 rows=400) (actual time=0.839..2.799 rows=400 loops=1)\n        -> Table scan on Student  (cost=41.00 rows=400) (actual time=0.837..2.703 rows=400 loops=1)\n    -> Covering index lookup on alias using <auto_key0> (studId=student.id)  (actual time=0.001..0.001 rows=0 loops=400)\n        -> Materialize  (cost=0.00..0.00 rows=0) (actual time=13.456..13.456 rows=0 loops=1)\n            -> Filter: (count(0) = (select #5))  (actual time=12.951..12.951 rows=0 loops=1)\n                -> Table scan on <temporary>  (actual time=0.001..0.004 rows=19 loops=1)\n                    -> Aggregate using temporary table  (actual time=12.940..12.947 rows=19 loops=1)\n                        -> Filter: (transcript.crsCode = `<subquery3>`.crsCode)  (cost=128.39 rows=103) (actual time=2.392..2.832 rows=19 loops=1)\n                            -> Inner hash join (<hash>(transcript.crsCode)=<hash>(`<subquery3>`.crsCode))  (cost=128.39 rows=103) (actual time=2.388..2.805 rows=19 loops=1)\n                                -> Table scan on Transcript  (cost=1.28 rows=100) (actual time=0.648..0.946 rows=100 loops=1)\n                                -> Hash\n                                    -> Table scan on <subquery3>  (cost=0.25..2.62 rows=10) (actual time=0.002..0.006 rows=19 loops=1)\n                                        -> Materialize with deduplication  (cost=22.64..25.01 rows=10) (actual time=1.667..1.673 rows=19 loops=1)\n                                            -> Filter: (course.crsCode is not null)  (cost=21.36 rows=10) (actual time=1.074..1.617 rows=19 loops=1)\n                                                -> Nested loop inner join  (cost=21.36 rows=10) (actual time=1.073..1.608 rows=19 loops=1)\n                                                    -> Filter: ((course.deptId = <cache>((@v8))) and (course.crsCode is not null))  (cost=10.25 rows=10) (actual time=0.407..0.714 rows=19 loops=1)\n                                                        -> Table scan on Course  (cost=10.25 rows=100) (actual time=0.384..0.628 rows=100 loops=1)\n                                                    -> Covering index lookup on Teaching using idx_teaching_crsCode_semester_profId (crsCode=course.crsCode)  (cost=1.02 rows=1) (actual time=0.043..0.046 rows=1 loops=19)\n                -> Select #5 (subquery in condition; uncacheable)\n                    -> Aggregate: count(0)  (cost=22.39 rows=10) (actual time=0.503..0.503 rows=1 loops=19)\n                        -> Nested loop semijoin  (cost=21.36 rows=10) (actual time=0.032..0.494 rows=19 loops=19)\n                            -> Filter: ((course.deptId = <cache>((@v8))) and (course.crsCode is not null))  (cost=10.25 rows=10) (actual time=0.017..0.334 rows=19 loops=19)\n                                -> Table scan on Course  (cost=10.25 rows=100) (actual time=0.011..0.265 rows=100 loops=19)\n                            -> Covering index lookup on Teaching using idx_teaching_crsCode_semester_profId (crsCode=course.crsCode)  (cost=1.05 rows=1) (actual time=0.008..0.008 rows=1 loops=361)\n            -> Select #5 (subquery in projection; uncacheable)\n                -> Aggregate: count(0)  (cost=22.39 rows=10) (actual time=0.503..0.503 rows=1 loops=19)\n                    -> Nested loop semijoin  (cost=21.36 rows=10) (actual time=0.032..0.494 rows=19 loops=19)\n                        -> Filter: ((course.deptId = <cache>((@v8))) and (course.crsCode is not null))  (cost=10.25 rows=10) (actual time=0.017..0.334 rows=19 loops=19)\n                            -> Table scan on Course  (cost=10.25 rows=100) (actual time=0.011..0.265 rows=100 loops=19)\n                        -> Covering index lookup on Teaching using idx_teaching_crsCode_semester_profId (crsCode=course.crsCode)  (cost=1.05 rows=1) (actual time=0.008..0.008 rows=1 loops=361)\n'

-- added index to student.id, transcript.studId, transcript.crsCode, Course.crsCode, deptId
-- new results
-- '-> Nested loop inner join  (cost=7.12 rows=10) (actual time=7.867..7.867 rows=0 loops=1)\n    -> Filter: (alias.studId is not null)  (cost=0.36..3.62 rows=10) (actual time=7.865..7.865 rows=0 loops=1)\n        -> Table scan on alias  (cost=2.50..2.50 rows=0) (actual time=0.002..0.002 rows=0 loops=1)\n            -> Materialize  (cost=2.50..2.50 rows=0) (actual time=7.864..7.864 rows=0 loops=1)\n                -> Filter: (count(0) = (select #5))  (actual time=7.845..7.845 rows=0 loops=1)\n                    -> Table scan on <temporary>  (actual time=0.002..0.005 rows=19 loops=1)\n                        -> Aggregate using temporary table  (actual time=7.833..7.839 rows=19 loops=1)\n                            -> Filter: (transcript.crsCode = course.crsCode)  (cost=118.76 rows=100) (actual time=1.598..1.860 rows=19 loops=1)\n                                -> Inner hash join (<hash>(transcript.crsCode)=<hash>(course.crsCode))  (cost=118.76 rows=100) (actual time=1.597..1.845 rows=19 loops=1)\n                                    -> Covering index scan on Transcript using idx_transcript_studId_crsCode  (cost=1.28 rows=100) (actual time=0.045..0.224 rows=100 loops=1)\n                                    -> Hash\n                                        -> Nested loop semijoin with duplicate removal on idx_course_crsCode_deptId  (cost=18.48 rows=10) (actual time=1.077..1.457 rows=19 loops=1)\n                                            -> Filter: ((course.deptId = <cache>((@v8))) and (course.crsCode is not null))  (cost=7.41 rows=10) (actual time=0.193..0.361 rows=19 loops=1)\n                                                -> Covering index scan on Course using idx_course_crsCode_deptId  (cost=7.41 rows=100) (actual time=0.046..0.287 rows=100 loops=1)\n                                            -> Covering index lookup on Teaching using idx_teaching_crsCode_semester_profId (crsCode=course.crsCode)  (cost=1.02 rows=1) (actual time=0.056..0.056 rows=1 loops=19)\n                    -> Select #5 (subquery in condition; uncacheable)\n                        -> Aggregate: count(0)  (cost=22.39 rows=10) (actual time=0.302..0.302 rows=1 loops=19)\n                            -> Nested loop semijoin  (cost=21.36 rows=10) (actual time=0.120..0.297 rows=19 loops=19)\n                                -> Filter: ((course.deptId = <cache>((@v8))) and (course.crsCode is not null))  (cost=10.25 rows=10) (actual time=0.110..0.207 rows=19 loops=19)\n                                    -> Covering index scan on Course using idx_course_crsCode_deptId  (cost=10.25 rows=100) (actual time=0.006..0.158 rows=100 loops=19)\n                                -> Covering index lookup on Teaching using idx_teaching_crsCode_semester_profId (crsCode=course.crsCode)  (cost=1.05 rows=1) (actual time=0.004..0.004 rows=1 loops=361)\n                -> Select #5 (subquery in projection; uncacheable)\n                    -> Aggregate: count(0)  (cost=22.39 rows=10) (actual time=0.302..0.302 rows=1 loops=19)\n                        -> Nested loop semijoin  (cost=21.36 rows=10) (actual time=0.120..0.297 rows=19 loops=19)\n                            -> Filter: ((course.deptId = <cache>((@v8))) and (course.crsCode is not null))  (cost=10.25 rows=10) (actual time=0.110..0.207 rows=19 loops=19)\n                                -> Covering index scan on Course using idx_course_crsCode_deptId  (cost=10.25 rows=100) (actual time=0.006..0.158 rows=100 loops=19)\n                            -> Covering index lookup on Teaching using idx_teaching_crsCode_semester_profId (crsCode=course.crsCode)  (cost=1.05 rows=1) (actual time=0.004..0.004 rows=1 loops=361)\n    -> Index lookup on Student using idx_student_id (id=alias.studId)  (cost=0.26 rows=1) (never executed)\n'

-- added an ORDER BY 
-- new results are
-- '-> Nested loop inner join  (cost=48.75 rows=100) (actual time=7.661..7.661 rows=0 loops=1)\n    -> Filter: (alias.studId is not null)  (cost=326.37..13.75 rows=100) (actual time=7.660..7.660 rows=0 loops=1)\n        -> Table scan on alias  (cost=0.01..15.38 rows=1031) (actual time=0.002..0.002 rows=0 loops=1)\n            -> Materialize  (cost=329.54..344.90 rows=1031) (actual time=7.660..7.660 rows=0 loops=1)\n                -> Filter: (count(0) = (select #5))  (cost=226.44 rows=1031) (actual time=7.642..7.642 rows=0 loops=1)\n                    -> Group aggregate: count(0)  (cost=226.44 rows=1031) (actual time=0.465..1.030 rows=19 loops=1)\n                        -> Nested loop inner join  (cost=123.34 rows=1031) (actual time=0.449..0.983 rows=19 loops=1)\n                            -> Filter: (transcript.crsCode is not null)  (cost=10.25 rows=100) (actual time=0.061..0.337 rows=100 loops=1)\n                                -> Covering index scan on Transcript using idx_transcript_studId_crsCode  (cost=10.25 rows=100) (actual time=0.060..0.311 rows=100 loops=1)\n                            -> Single-row index lookup on <subquery3> using <auto_distinct_key> (crsCode=transcript.crsCode)  (actual time=0.002..0.002 rows=0 loops=100)\n                                -> Materialize with deduplication  (cost=22.39..22.39 rows=10) (actual time=0.593..0.599 rows=19 loops=1)\n                                    -> Filter: (course.crsCode is not null)  (cost=21.36 rows=10) (actual time=0.144..0.319 rows=19 loops=1)\n                                        -> Nested loop inner join  (cost=21.36 rows=10) (actual time=0.143..0.315 rows=19 loops=1)\n                                            -> Filter: ((course.deptId = <cache>((@v8))) and (course.crsCode is not null))  (cost=10.25 rows=10) (actual time=0.086..0.151 rows=19 loops=1)\n                                                -> Covering index scan on Course using idx_course_crsCode_deptId  (cost=10.25 rows=100) (actual time=0.008..0.111 rows=100 loops=1)\n                                            -> Covering index lookup on Teaching using idx_teaching_crsCode_semester_profId (crsCode=course.crsCode)  (cost=1.02 rows=1) (actual time=0.006..0.008 rows=1 loops=19)\n                    -> Select #5 (subquery in condition; uncacheable)\n                        -> Aggregate: count(0)  (cost=22.39 rows=10) (actual time=0.342..0.342 rows=1 loops=19)\n                            -> Nested loop semijoin  (cost=21.36 rows=10) (actual time=0.127..0.335 rows=19 loops=19)\n                                -> Filter: ((course.deptId = <cache>((@v8))) and (course.crsCode is not null))  (cost=10.25 rows=10) (actual time=0.117..0.226 rows=19 loops=19)\n                                    -> Covering index scan on Course using idx_course_crsCode_deptId  (cost=10.25 rows=100) (actual time=0.008..0.173 rows=100 loops=19)\n                                -> Covering index lookup on Teaching using idx_teaching_crsCode_semester_profId (crsCode=course.crsCode)  (cost=1.05 rows=1) (actual time=0.005..0.005 rows=1 loops=361)\n                -> Select #5 (subquery in projection; uncacheable)\n                    -> Aggregate: count(0)  (cost=22.39 rows=10) (actual time=0.342..0.342 rows=1 loops=19)\n                        -> Nested loop semijoin  (cost=21.36 rows=10) (actual time=0.127..0.335 rows=19 loops=19)\n                            -> Filter: ((course.deptId = <cache>((@v8))) and (course.crsCode is not null))  (cost=10.25 rows=10) (actual time=0.117..0.226 rows=19 loops=19)\n                                -> Covering index scan on Course using idx_course_crsCode_deptId  (cost=10.25 rows=100) (actual time=0.008..0.173 rows=100 loops=19)\n                            -> Covering index lookup on Teaching using idx_teaching_crsCode_semester_profId (crsCode=course.crsCode)  (cost=1.05 rows=1) (actual time=0.005..0.005 rows=1 loops=361)\n    -> Index lookup on Student using idx_student_id (id=alias.studId)  (cost=0.25 rows=1) (never executed)\n'
-- so with this the cost is much greater even though the time is less so leaving out the ORDER BY may be better


EXPLAIN ANALYZE SELECT name FROM Student,
	(SELECT studId
	FROM Transcript
		WHERE crsCode IN
		(SELECT crsCode FROM Course WHERE deptId = @v8 AND crsCode IN (SELECT crsCode FROM Teaching))
		GROUP BY studId
		HAVING COUNT(*) = 
			(SELECT COUNT(*) FROM Course WHERE deptId = @v8 AND crsCode IN (SELECT crsCode FROM Teaching)) ORDER BY NULL) as alias
WHERE id = alias.studId;